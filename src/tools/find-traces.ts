import { JaegerClient } from '../client';
import { FindTracesResponse } from '../domain';
import { Tool } from './types';

import { z } from 'zod';
import { Server } from '@modelcontextprotocol/sdk/server/index.js';

export class FindTraces implements Tool {
    name(): string {
        return 'find-traces';
    }

    description(): string {
        return 'Searches the spans as JSON array of object in the OpenTelemetry resource spans format';
    }

    paramsSchema() {
        return {
            serviceName: z
                .string()
                .describe('Filters spans generated by a specific service.'),
            operationName: z
                .string()
                .describe(
                    'Filters spans by a specific operation / span name (Optional).'
                )
                .optional(),
            attributes: z
                .string()
                .describe(
                    'Filters spans by span attributes. ' +
                        'Attributes should be passed as a comma-separated list of key=value pairs. ' +
                        'Values can be strings, numbers, or booleans. ' +
                        'For example: "stringAttribute=str,integerAttribute=123,doubleAttribute=123.456,booleanAttribute=true"'
                )
                .optional(),
            startTimeMin: z
                .string()
                .datetime()
                .describe(
                    'Start of the time interval (inclusive) for the query. ' +
                        'Only traces with spans that started on or after this time will be returned. ' +
                        'The HTTP API uses RFC 3339, section 5.6 format (e.g., "2017-07-21T17:32:28Z").'
                ),
            startTimeMax: z
                .string()
                .datetime()
                .describe(
                    'End of the time interval (exclusive) for the query. ' +
                        'Only traces with spans that started before this time will be returned. ' +
                        'The HTTP API uses RFC 3339, section 5.6 format (e.g., "2017-07-21T17:32:28Z").'
                ),
            durationMin: z
                .number()
                .positive()
                .describe(
                    'Minimum duration of a span in milliseconds in the trace. ' +
                        'Only traces with spans that lasted at least this long will be returned (Optional). '
                )
                .optional(),
            durationMax: z
                .number()
                .positive()
                .describe(
                    'Maximum duration of a span in milliseconds in the trace. ' +
                        'Only traces with spans that lasted at most this long will be returned (Optional).'
                )
                .optional(),
            searchDepth: z
                .number()
                .positive()
                .describe(
                    'Defines the maximum search depth. ' +
                        'Depending on the backend storage implementation, this may behave like an SQL `LIMIT` clause. ' +
                        'However, some implementations might not support precise limits, ' +
                        'and a larger value generally results in more traces being returned (Optional).'
                )
                .optional(),
        };
    }

    private _normalizeAttributes(
        attributes: string
    ): { [k: string]: string } {
        const normalizedAttributes: { [k: string]: string } = {};
        if (attributes && attributes.trim()) {
            const pairs = attributes.split(',');
            for (const pair of pairs) {
                const [key, value] = pair.split('=', 2);
                if (key && value !== undefined) {
                    normalizedAttributes[key.trim()] = value.trim();
                }
            }
        }
        return normalizedAttributes;
    }

    async handle(
        server: Server,
        jaegerClient: JaegerClient,
        {
            serviceName,
            operationName,
            attributes,
            startTimeMin,
            startTimeMax,
            durationMin,
            durationMax,
            searchDepth,
        }: any
    ): Promise<string> {
        const response: FindTracesResponse = await jaegerClient.findTraces({
            query: {
                serviceName,
                operationName,
                attributes: this._normalizeAttributes(attributes),
                startTimeMin: startTimeMin,
                startTimeMax: startTimeMax,
                durationMin,
                durationMax,
                searchDepth,
            },
        });
        return JSON.stringify(response.resourceSpans || {});
    }
}
